# Grammar

NProg     ::= [Statement]
Statement ::= NDeclare
            | NAssign
            | NRead
            | NPrint
            | NScope
            | NIfElse

NScope    ::= `{` [Statement] `}`

Expr      ::= Term 
            | BinExpr

Term      ::= id
            | int
            | (Expr)

BinExpr   ::= Expr BinOp Expr

NIfElse       ::= `if` Expr NScope {`else` NScope}

NDeclare  ::= `let` id {`=` Expr} `;`
NAssign   ::= id = Expr `;`
NPrint    ::= `print` Expr `;`
NRead     ::= `read` id `;`


# Macros

MULTIPLICATION = >>[-]>[-]<<<[->>+<<]>[->[-<<+>>>+<]>[-<+>]<<]<



# Ideas

python??? Library for command line arguments

# while

gen_cond to(cond)[  *body*  gen_cond store(cond) to(cond)]

let arr = 0;
const arr_len = 5;

let i = arr_len;
while i {
    @(arr+i) = i;

    i = i - 1;
}

i = arr_len;
while i {
    print(&i)
}

42 @  ->  value of heap[42] 

42 69 !   -> store 69 at heap[42] 